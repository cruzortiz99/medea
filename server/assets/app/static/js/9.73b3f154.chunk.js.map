{"version":3,"sources":["components/molecules/AppHeaderMenu/index.tsx","components/atoms/AppHeaderMenuButton/index.tsx","pages/TestLab/index.tsx"],"names":["AppHeaderMenu","props","noCaret","renderToggle","rprops","ref","item","map","Item","active","onClick","label","id","AppHeaderMenuButton","style","backgroundColor","padding","TestPage","useState","selectedOption","setSelectedOption","headerMenu","subtile"],"mappings":"4FAAA,yBAmCeA,IAtBf,SAAuBC,GAErB,OACE,mCACE,cAAC,IAAD,CACEC,SAAO,EACPC,aAAc,SAACC,EAAQC,GAAT,OAAiBJ,EAAME,aAAaC,EAAQC,IAF5D,SAIGJ,EAAMK,KAAKC,KAAI,SAACD,GAAD,OACd,cAAC,IAASE,KAAV,CAEEC,OAAQH,EAAKG,OACbC,QAASJ,EAAKI,QAHhB,SAKGJ,EAAKK,OAJDL,EAAKM,a,2DCXPC,IAVf,SAA6BZ,GAC3B,OACE,kDACKA,GADL,IAEEa,MAAK,aAAIC,gBAAiB,QAASC,QAAS,GAAMf,Q,4FC6DzCgB,UA5Df,WACE,MAA4CC,mBAAS,YAArD,mBAAOC,EAAP,KAAuBC,EAAvB,KACMC,EAAa,CACjB,CACEV,MAAO,WACPC,GAAI,WACJH,OAA2B,aAAnBU,EACRT,QAAS,kBAAMU,EAAkB,cAEnC,CACET,MAAO,WACPC,GAAI,WACJH,OAA2B,aAAnBU,EACRT,QAAS,kBAAMU,EAAkB,cAEnC,CACET,MAAO,WACPC,GAAI,WACJH,OAA2B,aAAnBU,EACRT,QAAS,kBAAMU,EAAkB,cAEnC,CACET,MAAO,WACPC,GAAI,WACJH,OAA2B,aAAnBU,EACRT,QAAS,kBAAMU,EAAkB,cAEnC,CACET,MAAO,WACPC,GAAI,WACJH,OAA2B,aAAnBU,EACRT,QAAS,kBAAMU,EAAkB,cAEnC,CACET,MAAO,WACPC,GAAI,WACJH,OAA2B,aAAnBU,EACRT,QAAS,kBAAMU,EAAkB,eAGrC,OACE,qCACE,yCACA,cAAC,IAAD,CACEjB,aAAc,SAACF,EAAOI,GACpB,OAAO,cAAC,IAAD,2BAAyBJ,GAAzB,IAAgCI,IAAKA,EAArC,SACL,6BAAKc,QAGTb,KAAMe,EAAWd,KAAI,SAACe,GAAD,MAAc,CACjCX,MAAOW,EAAQX,MACfC,GAAIU,EAAQV,GACZH,OAAQa,EAAQb,OAChBC,QAASY,EAAQZ","file":"static/js/9.73b3f154.chunk.js","sourcesContent":["import React, { useState, ReactNode } from \"react\"\r\nimport { Dropdown } from \"rsuite\"\r\n\r\nexport type AppHeaderMenuProps = {\r\n  renderToggle: (props: any, ref: any) => ReactNode\r\n  item: { \r\n    label?: ReactNode, \r\n    id?: string, \r\n    active?: boolean, \r\n    onClick?: () => any \r\n  }[]\r\n}\r\n\r\nfunction AppHeaderMenu(props: AppHeaderMenuProps){\r\n  \r\n  return(\r\n    <>\r\n      <Dropdown\r\n        noCaret\r\n        renderToggle={(rprops, ref) => props.renderToggle(rprops, ref)}\r\n      >\r\n        {props.item.map((item) => (\r\n          <Dropdown.Item\r\n            key={item.id}\r\n            active={item.active}\r\n            onClick={item.onClick}\r\n          >\r\n            {item.label}\r\n          </Dropdown.Item>\r\n        ))}\r\n      </Dropdown>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default AppHeaderMenu","import React, { ReactNode } from \"react\"\r\n\r\nfunction AppHeaderMenuButton(props: React.DetailedHTMLProps<React.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>){\r\n  return(\r\n    <button\r\n     {...props}\r\n      style={{ backgroundColor: \"#fff0\", padding: 0, ...props }}\r\n    >\r\n    </button>\r\n  )\r\n}\r\n\r\nexport default AppHeaderMenuButton","import React, { ChangeEvent, useState } from \"react\"\r\nimport AppPlot from \"../../components/atoms/AppPlot\"\r\nimport AppHeaderMenu from \"../../components/molecules/AppHeaderMenu\"\r\nimport AppHeaderMenuButton from \"../../components/atoms/AppHeaderMenuButton\"\r\nimport { randomColor } from \"../../utils/css\"\r\n\r\n\r\nfunction TestPage() {\r\n  const [selectedOption, setSelectedOption] = useState(\"Opcion 1\")\r\n  const headerMenu = [\r\n    {\r\n      label: \"Opcion 1\",\r\n      id: \"#option1\",\r\n      active: selectedOption === \"Opcion 1\",\r\n      onClick: () => setSelectedOption(\"Opcion 1\")\r\n    },\r\n    {\r\n      label: \"Opcion 2\",\r\n      id: \"#option2\",\r\n      active: selectedOption === \"Opcion 2\",\r\n      onClick: () => setSelectedOption(\"Opcion 2\")\r\n    },\r\n    {\r\n      label: \"Opcion 3\",\r\n      id: \"#option3\",\r\n      active: selectedOption === \"Opcion 3\",\r\n      onClick: () => setSelectedOption(\"Opcion 3\")\r\n    },\r\n    {\r\n      label: \"Opcion 4\",\r\n      id: \"#option4\",\r\n      active: selectedOption === \"Opcion 4\",\r\n      onClick: () => setSelectedOption(\"Opcion 4\")\r\n    },\r\n    {\r\n      label: \"Opcion 5\",\r\n      id: \"#option5\",\r\n      active: selectedOption === \"Opcion 5\",\r\n      onClick: () => setSelectedOption(\"Opcion 5\")\r\n    },\r\n    {\r\n      label: \"Opcion 6\",\r\n      id: \"#option6\",\r\n      active: selectedOption === \"Opcion 6\",\r\n      onClick: () => setSelectedOption(\"Opcion 6\")\r\n    },\r\n  ]\r\n  return (\r\n    <>\r\n      <h2>TestLab</h2>\r\n      <AppHeaderMenu\r\n        renderToggle={(props, ref)=> {\r\n          return <AppHeaderMenuButton {...props} ref={ref}>\r\n            <h3>{selectedOption}</h3>\r\n          </AppHeaderMenuButton>\r\n        }}\r\n        item={headerMenu.map((subtile) => ({\r\n          label: subtile.label,\r\n          id: subtile.id,\r\n          active: subtile.active,\r\n          onClick: subtile.onClick\r\n        }))}\r\n      />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default TestPage\r\n"],"sourceRoot":""}